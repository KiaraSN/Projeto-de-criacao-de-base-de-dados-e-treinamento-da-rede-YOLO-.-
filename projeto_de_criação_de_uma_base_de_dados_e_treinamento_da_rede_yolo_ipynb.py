# -*- coding: utf-8 -*-
"""Projeto de criação de uma base de dados e treinamento da rede YOLO ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P6K0eR_h6zu5I7B7aqralJfhieJ39cYB
"""

# Commented out IPython magic to ensure Python compatibility.
# Clonar YOLOv5 e instalar dependências
!git clone https://github.com/ultralytics/yolov5
# %cd yolov5
!pip install -r requirements.txt

import os

# Criar pastas para imagens e labels
os.makedirs("esquilos", exist_ok=True)
os.makedirs("gatos", exist_ok=True)


print("Pastas criadas com sucesso! Agora faça upload das imagens e labels correspondentes.")

data_yaml = """
train: dataset/images/train
val: dataset/images/valid

nc: 2
names: ['cachorro','bicicleta']
"""

with open("custom_data.yaml","w") as f:
    f.write(data_yaml)

print("YAML criado com sucesso!")

!python train.py --img 640 --batch 4 --epochs 10 \
--data custom_data.yaml \
--weights yolov5s.pt --cache

!python detect.py --weights runs/train/exp/weights/best.pt \
--img 640 --conf 0.25 --source dataset/images/valid

import os
from IPython.display import display, Image

# Encontrar a última pasta de detecção criada pelo YOLO
detect_folder = sorted([d for d in os.listdir("runs/detect") if os.path.isdir(os.path.join("runs/detect", d))])[-1]
folder_path = os.path.join("runs/detect", detect_folder)

# Listar todas as imagens detectadas
images_detected = [f for f in os.listdir(folder_path) if f.endswith((".jpg",".png"))]

# Exibir todas as imagens detectadas
for img_name in images_detected:
    display(Image(os.path.join(folder_path, img_name)))

from google.colab import files

uploaded = files.upload()  # Vai abrir um prompt para você selecionar a imagem

for fn in uploaded.keys():
    print(fn)

import torch
from matplotlib import pyplot as plt
import cv2

# Carregar modelo pré-treinado
model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)

# Caminho da imagem (nome do arquivo upload)
img_path = "dog_bike.jpg"  # substitua pelo nome exato que apareceu no passo 2

# Rodar detecção e salvar resultado
results = model(img_path)
results.save()  # salva em runs/detect/exp

# Mostrar imagem detectada
output_path = results.files[0]  # pega caminho do arquivo salvo
img = cv2.imread(output_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

plt.figure(figsize=(10,10))
plt.imshow(img)
plt.axis('off')
plt.title("Resultado da detecção YOLO")
plt.show()